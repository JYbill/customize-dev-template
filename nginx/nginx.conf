user www-data; # 运行用户为www-data，用户不应具有过高的权限
worker_processes auto; # 工作进程数，通常根据CPU核心数来自动设置
pid /run/nginx.pid; # 进程pid文件
error_log /var/log/nginx/error.log; # 错误日志路径
access_log /var/log/nginx/access.log; # 访问日志路径
include /etc/nginx/modules-enabled/*.conf; # nginx模块

events {
    worker_connections 768; # 每个进程最大线程数
    multi_accept on; # 工作进程会尽可能多地接受新连接，而不是一次性接受一个
}

http {
    sendfile on; # 启用高效的文件传输模式，提高文件传输速度，减少上下文切换
    tcp_nopush on; # 在发送文件时合并多个包，避免发送小包，提高网络传输效率（TCP粘包）
    types_hash_max_size 2048; # MIME类型hash表最大值
    # server_tokens off;
    # server_names_hash_bucket_size 64;
    # server_name_in_redirect off;
    include /etc/nginx/mime.types; # 加载MIME类型定义文件
    default_type application/octet-stream; # 当文件类型无法识别时，默认使用application/octet-stream

    ##
    # SSL Settings
    ##
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # 支持的TLS协议版本，禁用了过时的SSLv3
    ssl_prefer_server_ciphers on; # 优先使用服务器定义的加密套件（算法）


    ##
    # Gzip Settings
    ##
    gzip on; # 启用Gzip压缩传输
    gzip_vary on; # 缓存命中相关，响应Vary: Accept-Encoding响应头，根据客户端的请求头Accept-Encoding命中缓存或重新响应对应Accept-Encoding的内容
    # gzip_proxied any; # 在何种情况下对代理请求的响应进行压缩（压缩代理后台的响应）
    gzip_comp_level 6; # gzip压缩等级1-9，压缩等级越高，压缩率越高，但CPU消耗也越高
    gzip_buffers 16 8k; # Gzip压缩所使用的缓冲区数量和大小
    gzip_http_version 1.1; # Gzip压缩的HTTP协议版本
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; # 指定要进行Gzip压缩的MIME类型

    ##
    # Virtual Host Configs
    ##
    # 配置文件目录
    include /etc/nginx/conf.d/*.conf;
}

