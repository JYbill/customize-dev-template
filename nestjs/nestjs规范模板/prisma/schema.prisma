generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  avatar   String?
  name     String  @unique
  banned   Boolean @default(false)
  password String

  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @default(now()) @updatedAt @map("update_time")
  isDelete   Boolean  @default(false) @map("is_deleted")

  // 外键 user：role = 1：多
  roleId Int  @map("role_id")
  role   Role @relation(fields: [roleId], references: [id])

  // 外键 repository：user = 1:多
  repositories Repository[]

  // 更新用户：资源项 = 1:多
  repositoryItem       RepositoryItem[] @relation("update")
  // 创建用户：资源项 = 1：多
  createRepositoryItem RepositoryItem[] @relation("create")

  // 用户：资源 = 1：多
  Resource  Resource[]
  // 用户：轮播图 = 1：多
  Slideshow Slideshow[]
  // 用户：轮播图 = 1:多
  Programme Programme[]

  @@map("user")
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String
  key        String   @unique
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @default(now()) @updatedAt @map("update_time")
  isDelete   Boolean  @default(false) @map("is_deleted")

  // 外键 user：role = 1：多
  users User[]

  @@map("role")
}

model Repository {
  id         Int      @id @default(autoincrement())
  name       String
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @default(now()) @updatedAt @map("update_time")
  isDelete   Boolean  @default(false) @map("is_deleted")

  // 外键 repository：user = 1:多
  user   User @relation(fields: [userId], references: [id])
  userId Int

  // 资源库：资源项 = 1：多
  repositoryItem RepositoryItem[]

  @@map("repository")
}

model RepositoryItem {
  id           Int     @id @default(autoincrement())
  name         String
  type         Int     @default(1) /// 1：视频；2：音频；3：文档；4：图片；5：外链；
  cover        String
  intro        String? /// 简介
  is_recommend Boolean @default(false)
  sequence     Int /// 顺序

  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @default(now()) @updatedAt @map("update_time")
  isDelete   Boolean  @default(false) @map("is_deleted")

  // 资源项：资源库 = 1：1
  repositoryId Int        @map("repository_id")
  repository   Repository @relation(fields: [repositoryId], references: [id]) /// 父级仓库id

  // 资源项：更新用户 = 1:1
  updateUserId Int?  @map("update_user_id")
  updateUser   User? @relation(name: "update", fields: [updateUserId], references: [id])

  // 资源项：用户 = 1:1
  userId Int  @map("user_id")
  user   User @relation(name: "create", fields: [userId], references: [id])

  // 资源项：资源 = 1：多
  Resource Resource[]

  @@map("repository_item")
}

model Resource {
  id         Int      @id @default(autoincrement())
  name       String
  size       String
  src        String
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @default(now()) @updatedAt @map("update_time")
  isDelete   Boolean  @default(false) @map("is_deleted")

  // 资源：资源项 = 1:1
  repositoryItemId Int            @map("repository_item_id")
  repositoryItem   RepositoryItem @relation(fields: [repositoryItemId], references: [id])

  // 资源：用户 = 1:1
  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@map("resource")
}

model Slideshow {
  id         Int      @id @default(autoincrement())
  cover      String
  url        String   @default("")
  sequence   Int /// 顺序
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @default(now()) @updatedAt @map("update_time")
  isDelete   Boolean  @default(false) @map("is_deleted")

  // 轮播图：用户 = 1:1
  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@map("slideshow")
}

model Programme {
  id         Int      @id @default(autoincrement())
  type       Int /// 1：资源库；2：课程；
  sequence   Int /// 顺序
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @default(now()) @updatedAt @map("update_time")
  isDelete   Boolean  @default(false) @map("is_deleted")

  dataId Int @map("data_id") /// 对应的资源id，type为1则为资源库id，2则为课程id

  // 栏目：用户 = 1:1
  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@map("programme")
}

model Statistics {
  id         Int      @id @default(autoincrement())
  type       Int /// 1：资源库；2：课程；
  count      Int      @default(0)
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @default(now()) @updatedAt @map("update_time")
  isDelete   Boolean  @default(false) @map("is_deleted")

  dataId Int @map("data_id") /// 对应的资源id，type为1则为资源库id，2则为课程id

  @@map("statistics")
}
