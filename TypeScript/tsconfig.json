{
  // 在编辑了tsconfig文件保存后，编辑器会根据tsconfig.json的配置重新生成文件，不过这个需要编辑器支持
  // "compileOnSave": true,
  // ⚠️ 继承来的同名配置会覆盖当前文件定义的配置(typescript 3.2+)
  // "extends": "",

  // "reference": []
  /*
    作用：将TS构建为更小的片段的一种方法。使用reference可以极大地缩短编译和编辑器交互时间，分割不同目录下配置文件的内容
  */

  "compilerOptions": {
    // 指定编译之后的版本目标，默认target为ES3，ESNEXT为最新规范
    "target": "ES2022",

    /*
    （构建时期）使用的模块标准，target默认跟随target，如target：ES6，module默认为ES6，按照ES6模块化
    提示：node16与nodeNext: 表示node.js双模块系统（支持ESM与CJS），目前他俩表示一致，未来如果模块化内容有更新，则nodeNext表示最新的模块化特性！

    node16、nodeNext: 
      1. 暗示并强制使用相同名称的"moduleResolution"设置
      2. 暗示且强制启用"esModuleInterop"
    node16暗示且强制"target"为"es2022"
    nodeNext暗示且强制"target"为"esnext"

    ⚠️ "es2015-esnext"不要和"moduleResolution": "node/nodeNext"一起使用。如果想使用ESM模块规则，应该在最近的package.json中定义"type": "module"即可。

    推荐：node v12+ 使用"node16"或"nodeNext"无论用CJS还是ESM 👍
    */
    /*
      使用自定义模块分辨，设置环境
      "module": [".ios", ".native", ""]
      import * as foo from './foo';
      首先检查./foo.ios.ts, 其次./foo.native.ts, 最后./foo.ts.
    */
    "module": "NodeNext",

    /* 
      模块查找规则（编译时期）
      "bundler" v5.0+ 不使用bundler打包，适用于写npm包启用，让构建工具去处理引入写法，"target": "esnext"和"moduleResolution": "node"一起使用。
    */
    // "moduleResolution": "NodeNext",

    // 用来指定编译文件的根目录，编译器会在根目录查找入口文件
    "rootDir": "./src",
    // 用来指定输出文件夹，值为一个文件夹路径字符串，输出的文件都将放置在这个文件夹
    "outDir": "./dist",

    // ES模块交互，推荐开启，可以让ESModule与CJS进行包装，兼容性调用(默认：false)
    /**
     代码：
      import fs from 'fs';
      console.log(fs);
     编译后：
      const fs = require("fs");
      console.log(fs.default);

     代码：
      import * as fs from "fs";
      console.log(fs);
     编译后：
      const fs = require("fs");
      console.log(fs);

    总结：
     开启后TS会对编译后的导入进行工具包裹
     将import fs from "fs"，中的fs变量，如果不是ESM则会包括成
     fs["default"] = 真实fs内容
     以fs["default"]形式去使用

    ⚠️注意：如果导出的内容都在导出的原型链上，则应该使用import fs from "fs"形式，或关闭"esModuleInterop"，这于TS编译转化的工具函数有关
     */
    "esModuleInterop": true,

    // 导入文件采用大小写一致，false允许忽略大小写
    "forceConsistentCasingInFileNames": true,

    // 跳过第三方库检查的类型检查
    "skipLibCheck": true,

    // 包含一组内建JS接口的类型定义，如"DOM"...，默认包括target相匹配的api类型定义
    "lib": ["ESNext"],

    // "allowJs": false, // 默认，false：不允许编写js
    // checkJs：值为 true 或 false，用来指定是否检查和报告 JS 文件中的错误，默认是 false。
    // "checkJs": false,
    // typing跟路径, 默认情况node_modules/@types都是可见的，除特例
    // "typeRoots": ["./"]

    // 指定jsx代码用于的开发环境
    // "preserve": 保留原始jsx后续用babel转更好
    // "react"： 转成react编译后对应的js代码，如<div>哈哈哈哈</div> => createElement("div", {}, [哈哈哈哈])
    "jsx": "preserve",

    // 指定生成目标为react JSX时，使用的JSX工厂函数
    // "jsxFactory": "React.createElement",

    // 用来指定是否在编译的时候生成响应的".d.ts"声明文件。如果设为 true，编译每个 ts 文件之后会生成一个 js 文件和一个声明文件
    "declaration": false,
    // 是否为声明文件.d.ts生成.map文件
    "declarationMap": true,
    // 是否允许导入json模块，默认：false
    "resolveJsonModule": true,
    // 为 true 时，它会隐式地将 catch 中的任何变量设置为 unknown 而不是 any
    // "useUnknownInCatchVariables": false,

    // 检测到一定会执行return代码后，后面如果还有代码会报错
    "allowUnreachableCode": true,

    // 使用`.`访问存在的属性object.params，使用object["name"]访问未知的选项
    "noPropertyAccessFromIndexSignature": true,

    // 允许模块所有导出时，无需使用`* as`的语法糖
    // 例子：原本需要import * as React from "react";
    // 为true时，import React from "react";
    "allowSyntheticDefaultImports": true,

    // 用于指定将输出文件合并为一个文件，它的值为一个文件路径名, 只有设置 module 的值为 amd 和 system 模块时才支持这个配置
    // "outFile": "./dist/main.js"
    // 是否将编译后的文件中的注释删掉, 默认false, 除了/!*开头的版权信息
    "removeComments": true,
    // 不生成变编译文件
    // "noEmit": false,
    // 只生成.d.ts类型声明文件, 编译交给第三方编译工具
    "emitDeclarationOnly": true,

    // 指定是否引入tslib里的辅助工具函数， 默认false
    // 形如babel里的`polyfill`，当前环境没有的api，通过polyfill补丁的形式打包进去，从而正常使用
    "importHelpers": true,

    // 是否将每个文件作为单独的模块，默认true，它不可以和`declaration`同时设定
    // "isolatedModules": true,

    // --------------------------  类型检查选项 start --------------------------
    "strict": true, // 严格类型检查模式, 为true开启下面包含的所有检查，默认false
    "noImplicitAny": true, // 不允许type类型为any，包括自动推断为any也会报错
    "alwaysStrict": true, // 并且在编译之后的 JS 文件中加入"use strict"，用来告诉浏览器该 JS 为严格模式
    "strictNullChecks": true, // null和 undefined 值不能赋值给非这两种类型的值，如`const str: string;` 报错
    // 会更彻底地检查函数参数
    /* 
      interface Animal {
        name: string;
      }
      interface Dog extends Animal {
        breeds: Array<string>;
      }
      let getDogName = (dog: Dog) => dog.name;
      let getAnimalName = (animal: Animal) => animal.name;

     getDogName = getAnimalName; // Okay (狗是动物，所以可以变成动物，广范围可以接受窄范围)
     getAnimalName = getDogName; // Okay (默认okay，开启后即bad，动物无法变成狗，窄范围无法接收广范围)
     */
    "strictFunctionTypes": true, // 默认false，是否严格检查函数的逆变多态
    "strictPropertyInitialization": true, // 确保在构造函数中初始化所有类属性，否则报错，或者可以定义为String | undefined
    "strictBindCallApply": true, // 不正确使用call()、bind() 和 apply() 函数时会报错，如：传参...
    // --------------------------  类型检查选项 end  --------------------------

    // 额外检查
    // 不允许出现未使用的变量
    "noUnusedLocals": false,
    // 不允许出现未使用的变量(范围仅在函数型参和函数内部)
    // "noUnusedParameters": false,
    // 保证所有函数返回值都显示声明return
    "noImplicitReturns": true,
    // switch语句中缺少`break`或`return`关键字，这个编译选项就会生成错误
    "noFallthroughCasesInSwitch": true,
    // 不正确地使用 this 关键字的情况下或在不清楚 this 所指的位置的地方提示错误
    "noImplicitThis": true,

    /* 
    // 打包工具经过配置后下面的引入可以都生效
    import * as utils from "./utils";     
    import * as utils from "./utils.mjs";
    */

    // 基准目录：
    /*
    baseUrl
        ├── ex.ts
        ├── hello
        │   └── world.ts
        └── tsconfig.json

      // 设置之后以当前目录为基准目录
      // 未设置：import { helloWorld } from "./hello/world";
      import { helloWorld } from "hello/world";
      console.log(helloWorld);
    */
    // "baseUrl": "./"

    // 用于设置模块名到基于baseUrl的路径映射的`别名`
    /*
      // 你可以告诉TS文件解析器路径别名，⚠️ 仅起到路径解析，如果使用其他构建工具进行打包，需在再其他构建工具(如：webpack、vite)中也要配置别名，这里只是起到类型检测的作用！
      {
        "compilerOptions": {
          "baseUrl": "src",
          "paths": {
              "app/*": ["app/*"],
              "config/*": ["app/_config/*"],
              "tests/*": ["tests/*"]
          },
      }
    */
    // "paths": {},

    // 在构建时编译器会将这个路径列表中的路径内容都放到一个文件夹中
    // "rootDirs": [],
    // 用来指定声明文件或文件夹的路径列表，如果指定了此项，则只有在这里列出的声明文件才会被加载, 默认所有"**/node_modules/**/@types/*"包都将包含在你的编译过程中
    // "typeRoots": [],
    // 用来指定需要包含的模块，只有在这里列出的模块声明文件才会被加载进来
    // "types": [],
    // 允许从没有默认导出的模块中默认导入
    // "allowSyntheticDefaultImports": false,

    // --------------------------  source map start  --------------------------
    // 源码.ts映射.map文件，便于报错时知道ts文件错误发生的位置信息
    "sourceMap": true
    // 指定调试器应该找到 TypeScript 文件而不是js源文件位置，这个值会被写进 .map 文件里
    // "sourceRoot": ""
    // 指定调试器找到映射文件而非生成文件的位置，指定 map 文件的根路径
    // "mapRoot": ""
    // 用于指定是否进一步将 .ts 文件的内容也包含到输出文件中。
    // "inlineSources": true,
    // --------------------------  source map start  --------------------------

    /* 实验性选项 */
    // 用于指定是否启用实验性的装饰器特性
    // "experimentalDecorators": true,
    // 用于指定是否为装饰器提供元数据支持
    // "emitDecoratorMetadata": true,

    // （编译时）允许TS文件使用特定于的扩展名（如 .ts、.mts 或 .tsx）相互导入，需开启noEmit或emitDeclarationOnly时才生效，由第三方构建工具处理这些模块
    // "allowImportingTsExtensions": "", // Typescript v5.0+

    // 强制TS从node_modules中的包中读取时查询package.json文件的exports字段
    // "resolvePackageJsonExports": true, // Typescript v5.0+
    // 强制TS从node_modules中的包中读取时查询package.json文件的exports字段
    // "resolvePackageJsonImports": true, // Typescript v5.0+
    // 在moduleResolution的node16、nodeNext和bundler选项下，以上两选项默认为true

    // 当存在构建工具，如：已有css-loader，想直接导入css文件，编译时通过，构建时由构建工具处理
    // "allowArbitraryExtensions": true, // Typescript v5.0+
    /* 
    app.css
    .cookie-banner { display: none; }

    // 以前的方法：添加一个app.css.d.ts类型声明文件，但在moduleResolution：node16或nodeNext下的module：ESM模块化规则文件中出错。因为cjs规则是对"app.css.js"的类型声明文件，骗过了编辑器；而ESM需要完整的后缀名压根就没有该js文件
    // app.css.d.ts
      declare const css: {
        cookieBanner: string;
      };
      export default css;
    
    App.tsx
    import styles from "./app.css";
    styles.cookieBanner; // string
     */

    // 导包时，首选package.json下的exports或imports字段中的指定字段
    // "customConditions": ["custom"], // Typescript v5.0+
    /* 
    生效条件，moduleResolution: ["node16", "nodeNext", "bundler"]
    package.json文件
    {
    "exports": {
        ".": {
            "custom": "./foo.mjs", 首选！
            "node": "./bar.mjs",
            "import": "./baz.mjs",
            "require": "./biz.mjs"
        }
      }
    }
     */

    // 完全删除，以下的两种导入方式，替换弃用以前的"importsNotUsedAsValues"、"preserveValueImports"
    // import type Person from "...";
    // import type { Person } from "...";
    // "verbatimModuleSyntax": "", // Typescript v5.0+
  }

  // --------------------------  选择、排除编译文件 start  --------------------------
  // "files": [] // 指定需要编译的ts文件，👎(基本不用)
  /*
    提示：只能写文件名
    例子🌰：
    files: ["core.ts", "sys.ts"]
    含义：项目编译时包含core.ts文件和sys.ts文件，如果不存在会报错，当项目包含过的文件可以使用"include"属性配合global去包含
  */

  // "include": ["src/**/*.ts", "type/*.d.ts"], // ⚠️ 默认：根目录下的所有文件；指定需要编译的ts文件，支持global通配符
  // "exclude": ["type/*.d.ts"] // 从`include`包含的文件中移除指定文件，支持global通配符
  // --------------------------  选择、排除编译文件 end  --------------------------
}
