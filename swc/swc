/*
从TS迁移过来之前,最好将`tsconfig.json`如下选项开启,有助于避免编译错误
{
    isolatedModules: true, // SWC与该选项的编译行为一致
    importsNotUsedAsValues: "error", // SWC无法分辨import导入的是值还是类型,这样确保导入类型加入正确的 import type {} fromn 'xxx'
    esModuleInterop: true, // 导入互操作性
    verbatimModuleSyntax: true,
    useDefineForClassFields: // 参考: https://www.typescriptlang.org/tsconfig/#useDefineForClassFields
}
💡 SWC只做编译,不做类型检查,如果需要类型检查请用TSC
*/
{
    "$schema": "https://swc.rs/schema.json",

    // 模块化规则
    "module": {
      // commonjs、es6(esm)...
      // 参考: https://swc.rs/docs/configuration/modules#es6
      "type": "es6",

      // 忽略动态导入,推荐开启,现代版本的nodejs都支持动态导入
      // ⚠️ 如果是纯ESM,则一定要开启该选项
      "ignoreDynamic": true 
    },

    // JS编译规则
    "jsc": {
      // 指定编译目标, 如: es2016
      "target": "esnext",
      // 编译解释器
      "parser": {
        // 解析语法
        "syntax": "typescript",
        // 启用装饰器解析
        "decorators": true,
        // 启用动态导入解析
        "dynamicImport": true
      },

      // 根路径
      "baseUrl": "./"
    },

    "transform": {
        // 生成装饰器元数据
        "decoratorMetadata": true,
        // 使用传统装饰器语法
        "legacyDecorator": true
    },

    // 保留class名不进行混淆
    "keepClassNames": true,
    // 将@swc/helper辅助代码作为外部依赖放在node_modules中, 如果为false则打进产物中内联
    "externalHelpers": true,
    // 生成更简洁的代码
    // 参考: https://swc.rs/docs/configuration/compilation#jscloose
    loose: false,

    // 是否启用压缩
    "minify": false,

    // 打出source-map
    "sourceMaps": true
  }
